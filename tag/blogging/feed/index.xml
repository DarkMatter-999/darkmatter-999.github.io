<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Front Page - Lakshyajeet&#039;s Blog</title>
	<atom:link href="https://darkmatter-999.github.io/tag/blogging/feed/" rel="self" type="application/rss+xml" />
	<link>https://darkmatter-999.github.io/</link>
	<description></description>
	<lastBuildDate>Sun, 06 Jul 2025 15:58:58 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.8.1</generator>

<image>
	<url>https://darkmatter-999.github.io/wp-content/uploads/2025/01/cropped-nyan-1-32x32.gif</url>
	<title>Front Page - Lakshyajeet&#039;s Blog</title>
	<link>https://darkmatter-999.github.io/</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>WordPress Block Themes: Block Themes and Block Patterns Explained</title>
		<link>https://darkmatter-999.github.io/wordpress-block-themes-block-themes-and-block-patterns-explained/</link>
					<comments>https://darkmatter-999.github.io/wordpress-block-themes-block-themes-and-block-patterns-explained/#respond</comments>
		
		<dc:creator><![CDATA[lakshyajeet]]></dc:creator>
		<pubDate>Tue, 13 May 2025 16:28:27 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<category><![CDATA[blog]]></category>
		<category><![CDATA[blogging]]></category>
		<category><![CDATA[digital-marketing]]></category>
		<category><![CDATA[wordpress]]></category>
		<category><![CDATA[writing]]></category>
		<guid isPermaLink="false">https://lakshyajeet999.wordpress.com/?p=898</guid>

					<description><![CDATA[<p>As WordPress continues to evolve, so does the way we design and build websites. With the introduction of Full Site Editing (FSE), we’ve entered a new era where Block Themes and Block Patterns play a central role in how our sites look and function. Let’s dive into what Block Themes and Block Patterns are, how [&#8230;]</p>
<p>The post <a href="https://darkmatter-999.github.io/wordpress-block-themes-block-themes-and-block-patterns-explained/">WordPress Block Themes: Block Themes and Block Patterns Explained</a> appeared first on <a href="https://darkmatter-999.github.io/">Lakshyajeet&#039;s Blog</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<p>As WordPress continues to evolve, so does the way we design and build websites. With the introduction of Full Site Editing (FSE), we’ve entered a new era where <strong>Block Themes</strong> and <strong>Block Patterns</strong> play a central role in how our sites look and function.</p>



<p>Let’s dive into what Block Themes and Block Patterns are, how they differ, and how we can use them to create more flexible and beautiful websites.</p>



<h2 class="wp-block-heading">What Are WordPress Block Themes?</h2>



<p><strong>Block Themes</strong> are a new type of WordPress theme that are built entirely with blocks. These themes leverage the power of the Gutenberg block editor to allow us to customize every part of our site—from headers and footers to templates and content areas—without writing custom PHP templates.</p>



<h3 class="wp-block-heading">Key Features of Block Themes:</h3>



<ul class="wp-block-list">
<li>Fully compatible with Full Site Editing (FSE)</li>



<li>Use of <code>theme.json</code> for global settings and styles</li>



<li>All templates and parts are created using blocks (<code>.html</code> files)</li>



<li>High design flexibility without needing a child theme</li>
</ul>



<h3 class="wp-block-heading">A Basic Structure of a Block Theme:</h3>



<pre class="wp-block-code"><code>my-block-theme/
├── block-templates/
│   ├── index.html
│   └── single.html
├── block-template-parts/
│   ├── header.html
│   └── footer.html
├── patterns/
│   └── test.html
├── styles/
│   └── style.css
├── functions.php
├── style.css
├── theme.json</code></pre>



<p>Example of <code>theme.json</code> in a Block Theme:</p>



<pre class="wp-block-syntaxhighlighter-code">{
  "version": 2,
  "settings": {
    "color": {
      "palette": [
        {
          "slug": "primary",
          "color": "#0073aa",
          "name": "Primary"
        }
      ]
    }
  },
  "styles": {
    "elements": {
      "h1": {
        "typography": {
          "fontSize": "2.5rem"
        }
      }
    }
  }
}</pre>



<p>This file gives us centralized control over global styles like fonts, colors, and spacing—without editing any CSS.</p>



<h2 class="wp-block-heading">What Are WordPress Block Patterns?</h2>



<p><strong>Block Patterns</strong> are predefined collections of blocks that we can insert into pages or posts to speed up the design process. Think of them like reusable design sections—call to actions, hero sections, testimonials—that can be dropped in with one click.</p>



<h3 class="wp-block-heading">Why We Love Block Patterns:</h3>



<ul class="wp-block-list">
<li>Reusable and modular</li>



<li>Speeds up page design</li>



<li>Customizable after insertion</li>



<li>Encourages consistent design</li>
</ul>



<h3 class="wp-block-heading">Registering a Custom Block Pattern in a Theme:</h3>



<p>We can register patterns by adding a PHP file in the <code>patterns/</code> directory and hooking into it in <code>functions.php</code>.</p>



<h5 class="wp-block-heading">Example: <code>patterns/call-to-action.php</code></h5>



<pre class="wp-block-syntaxhighlighter-code">&lt;?php
register_block_pattern(
    'mytheme/call-to-action',
    array(
        'title'       =&gt; __('Call to Action', 'mytheme'),
        'description' =&gt; _x('A full-width call to action section.', 'Block pattern description', 'mytheme'),
        'content'     =&gt; '&lt;!-- wp:group {"align":"full","backgroundColor":"primary","className":"cta"} --&gt;
                            &lt;div class="wp-block-group alignfull cta has-primary-background-color"&gt;
                              &lt;h2&gt;Ready to start your journey?&lt;/h2&gt;
                              &lt;p&gt;Join us today and build your future.&lt;/p&gt;
                              &lt;a class="wp-block-button__link" href="/signup"&gt;Get Started&lt;/a&gt;
                            &lt;/div&gt;
                          &lt;!-- /wp:group --&gt;',
        'categories'  =&gt; array('call-to-action'),
    )
);</pre>



<h2 class="wp-block-heading">Block Themes vs Classic Themes</h2>



<figure class="wp-block-table"><table class="has-fixed-layout"><thead><tr><th>Feature</th><th>Classic Themes</th><th>Block Themes</th></tr></thead><tbody><tr><td>Template Language</td><td>PHP</td><td>HTML + Gutenberg Blocks</td></tr><tr><td>Customizer Support</td><td>Yes</td><td>Limited</td></tr><tr><td>FSE Compatibility</td><td>No</td><td>Yes</td></tr><tr><td><code>theme.json</code> Support</td><td>No</td><td>Yes</td></tr><tr><td>Developer Focus</td><td>More code-heavy</td><td>Visual-first, block-based</td></tr></tbody></table></figure>



<h2 class="wp-block-heading">Best Practices When Using Block Themes and Patterns</h2>



<ul class="wp-block-list">
<li>Use <code>theme.json</code> to manage styles globally.</li>



<li>Keep templates modular—use template parts for headers, footers, etc.</li>



<li>Take advantage of WordPress’s native block patterns directory.</li>



<li>Encourage team members to reuse patterns for brand consistency.</li>
</ul>



<h2 class="wp-block-heading">Conclusion</h2>



<p>Block Themes and Block Patterns aren’t just buzzwords—they&#8217;re the future of WordPress. Whether we’re building for clients or crafting our own sites, these tools give us greater flexibility, faster development, and more power over design—all while embracing a no-code/low-code philosophy.</p>
<p>The post <a href="https://darkmatter-999.github.io/wordpress-block-themes-block-themes-and-block-patterns-explained/">WordPress Block Themes: Block Themes and Block Patterns Explained</a> appeared first on <a href="https://darkmatter-999.github.io/">Lakshyajeet&#039;s Blog</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://darkmatter-999.github.io/wordpress-block-themes-block-themes-and-block-patterns-explained/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>WordPress Block Themes: Introduction</title>
		<link>https://darkmatter-999.github.io/wordpress-block-themes-introduction/</link>
					<comments>https://darkmatter-999.github.io/wordpress-block-themes-introduction/#respond</comments>
		
		<dc:creator><![CDATA[lakshyajeet]]></dc:creator>
		<pubDate>Mon, 12 May 2025 14:58:01 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<category><![CDATA[blog]]></category>
		<category><![CDATA[blogging]]></category>
		<category><![CDATA[technology]]></category>
		<category><![CDATA[wordpress]]></category>
		<category><![CDATA[writing]]></category>
		<guid isPermaLink="false">https://lakshyajeet999.wordpress.com/?p=890</guid>

					<description><![CDATA[<p>In the world of WordPress, there were lot of changes over the years. One of the most significant advancements has been the introduction of Block Themes. As we explore this new concept, we’ll break down what WordPress Block Themes are, how they differ from traditional themes, and why they are essential for the future of [&#8230;]</p>
<p>The post <a href="https://darkmatter-999.github.io/wordpress-block-themes-introduction/">WordPress Block Themes: Introduction</a> appeared first on <a href="https://darkmatter-999.github.io/">Lakshyajeet&#039;s Blog</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<p>In the world of WordPress, there were lot of changes over the years. One of the most significant advancements has been the introduction of <strong>Block Themes</strong>. As we explore this new concept, we’ll break down what WordPress Block Themes are, how they differ from traditional themes, and why they are essential for the future of web design on WordPress.</p>



<h2 class="wp-block-heading">What are WordPress Block Themes?</h2>



<p>A WordPress Block Theme is a theme that fully embraces the <strong>Block Editor</strong>, also known as <strong>Gutenberg</strong>. Block Themes are designed to work with the block-based approach that WordPress introduced to content creation. Unlike traditional themes, which rely heavily on PHP templates and widget areas, Block Themes provide an entirely block-based approach to building and customizing a website.</p>



<p>Essentially, a Block Theme uses blocks for all aspects of the site — including the header, footer, and sidebar. With this structure, everything on the website, from the smallest detail to the entire layout, is built using blocks. This creates a more unified and consistent experience when it comes to designing and customizing a website in WordPress.</p>



<h2 class="wp-block-heading">How Block Themes Differ from Traditional Themes</h2>



<p>Before Block Themes, WordPress used a theme structure that involved PHP files for templates, like <code>header.php</code>, <code>footer.php</code>, <code>single.php</code>, and others. These files were designed to output various sections of a webpage, which would then be styled using CSS and customized using widgets.</p>



<p>In contrast, Block Themes shift the focus to <strong>blocks</strong> as the main building components for every part of a WordPress site. This has a few important differences:</p>



<ol class="wp-block-list">
<li><strong>Template Parts as Blocks</strong>: In traditional themes, elements like the header, footer, and sidebar are typically added through PHP code. In Block Themes, these elements are created as blocks. This gives users the ability to edit these parts directly in the WordPress Block Editor.</li>



<li><strong>No PHP Template Files</strong>: Traditional themes heavily rely on PHP files like <code>index.php</code> or <code>page.php</code> for rendering. In Block Themes, most of the rendering is done through <strong>HTML templates</strong> powered by the block-based system.</li>



<li><strong>Full-Site Editing</strong>: Block Themes are built for <strong>Full-Site Editing (FSE)</strong>, which allows users to edit their entire website (not just posts and pages) from the block editor. This includes editing headers, footers, and sidebars — everything becomes editable within the block editor environment.</li>
</ol>



<h2 class="wp-block-heading">Why Are WordPress Block Themes Important?</h2>



<p>As WordPress evolves, so do the needs of developers and users alike. Block Themes represent the future of WordPress theming and offer several important advantages:</p>



<ol class="wp-block-list">
<li><strong>Simplified Design Process</strong>: With everything built as blocks, users can easily edit, move, or add new components to their website. No need to dive deep into PHP files or manage widgets — everything is in the editor.</li>



<li><strong>Consistency Across the Site</strong>: Since the whole website structure is built with blocks, it ensures that the design remains consistent. For instance, the header block is the same across all pages, ensuring a uniform look and feel.</li>



<li><strong>Improved Customization</strong>: With Block Themes, we can customize our entire site directly from the WordPress admin area, without needing to use custom code. This is great for non-developers and designers who want to focus more on content and layout.</li>



<li><strong>Compatibility with the Block Editor</strong>: Block Themes are fully compatible with the Gutenberg Block Editor, making it easier to design content-heavy pages. Gutenberg continues to evolve, and using a Block Theme ensures we&#8217;re future-proofing our WordPress website.</li>
</ol>



<h2 class="wp-block-heading">How to Create a Basic WordPress Block Theme</h2>



<p>Creating a WordPress Block Theme requires some foundational knowledge of how blocks work in WordPress. Here&#8217;s a very basic example of how we can create a simple Block Theme.</p>



<h3 class="wp-block-heading">Step 1: Set Up Theme Folder</h3>



<p>To begin creating a Block Theme, create a new folder in our <code>wp-content/themes</code> directory. Let’s call it <code>my-block-theme</code>.</p>



<h3 class="wp-block-heading">Step 2: Create <code>style.css</code></h3>



<p>Inside the <code>my-block-theme</code> folder, create a <code>style.css</code> file to define the theme’s meta information.</p>



<pre class="wp-block-syntaxhighlighter-code">/*
Theme Name: My Block Theme
Theme URI: https://example.com/my-block-theme
Author: Your Name
Author URI: https://example.com/
Description: A simple Block-based WordPress theme.
Version: 1.0
Requires at least: 5.8
Requires PHP: 7.4
License: GPL2
Text Domain: my-block-theme
*/</pre>



<h3 class="wp-block-heading">Step 3: Create <code>theme.json</code></h3>



<p>To enable Full-Site Editing and block-based template structures, we need a <code>theme.json</code> file. This file allows us to define global styles and configurations for blocks.</p>



<pre class="wp-block-syntaxhighlighter-code">{
  "version": 2,
  "settings": {
    "custom": {
      "spacing": {
        "unit": "px"
      }
    }
  }
}</pre>



<h3 class="wp-block-heading">Step 4: Define Templates Using Blocks</h3>



<p>Now, we’ll need to define our theme’s templates. For a Block Theme, this is typically done with HTML files.</p>



<p>For example, create a file called <code>index.html</code> inside our theme folder.</p>



<pre class="wp-block-syntaxhighlighter-code">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;title&gt;My Block Theme&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;!-- Header Block --&gt;
  &lt;div class="wp-block-site-header"&gt;
    &lt;!-- Site Header Content Here --&gt;
  &lt;/div&gt;
  
  &lt;!-- Main Content Block --&gt;
  &lt;div class="wp-block-post-content"&gt;
    &lt;!-- Main Content Here --&gt;
  &lt;/div&gt;

  &lt;!-- Footer Block --&gt;
  &lt;div class="wp-block-site-footer"&gt;
    &lt;!-- Footer Content Here --&gt;
  &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</pre>



<p>This basic structure defines the three key blocks: header, content, and footer.</p>



<h3 class="wp-block-heading">Step 5: Activate the Theme</h3>



<p>After we’ve set up these files, we can go to our WordPress dashboard and navigate to <strong>Appearance &gt; Themes</strong>. We should see our new Block Theme, “My Block Theme,” listed there. Activate it.</p>



<h2 class="wp-block-heading">Conclusion</h2>



<p>Block Themes represent the future of WordPress. They provide a more intuitive, flexible, and consistent approach to website design, making it easier for us to create and manage websites without needing to rely on complex PHP files or traditional theme structures.</p>



<p>By adopting Block Themes, we&#8217;re not only improving the customization experience for ourselves but also ensuring that we stay ahead of the curve with WordPress’s growing block-based capabilities. As the Block Editor continues to evolve, the power and flexibility of Block Themes will only increase, making it an essential tool for WordPress developers and designers moving forward.</p>



<p></p>
<p>The post <a href="https://darkmatter-999.github.io/wordpress-block-themes-introduction/">WordPress Block Themes: Introduction</a> appeared first on <a href="https://darkmatter-999.github.io/">Lakshyajeet&#039;s Blog</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://darkmatter-999.github.io/wordpress-block-themes-introduction/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>WordPress Block Editor: Widgets</title>
		<link>https://darkmatter-999.github.io/wordpress-block-editor-widgets/</link>
					<comments>https://darkmatter-999.github.io/wordpress-block-editor-widgets/#respond</comments>
		
		<dc:creator><![CDATA[lakshyajeet]]></dc:creator>
		<pubDate>Fri, 09 May 2025 14:18:57 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<category><![CDATA[blog]]></category>
		<category><![CDATA[blogging]]></category>
		<category><![CDATA[business]]></category>
		<category><![CDATA[digital-marketing]]></category>
		<category><![CDATA[wordpress]]></category>
		<guid isPermaLink="false">https://lakshyajeet999.wordpress.com/?p=884</guid>

					<description><![CDATA[<p>As WordPress continues to evolve, one of the most transformative updates in recent years has been the introduction of the Block Editor—also known as Gutenberg. For us as content creators, developers, and website managers, this shift offers a more visual, flexible, and intuitive way to build pages and manage content. What Are Widgets in the [&#8230;]</p>
<p>The post <a href="https://darkmatter-999.github.io/wordpress-block-editor-widgets/">WordPress Block Editor: Widgets</a> appeared first on <a href="https://darkmatter-999.github.io/">Lakshyajeet&#039;s Blog</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<p>As WordPress continues to evolve, one of the most transformative updates in recent years has been the introduction of the <strong>Block Editor</strong>—also known as <strong>Gutenberg</strong>. For us as content creators, developers, and website managers, this shift offers a more visual, flexible, and intuitive way to build pages and manage content.</p>



<h2 class="wp-block-heading">What Are Widgets in the WordPress Block Editor?</h2>



<p>Traditionally, WordPress widgets were managed through the <strong>Appearance → Widgets</strong> menu in the dashboard. These were modular components—like recent posts, calendars, search bars, and more—that we could drag and drop into widget areas such as sidebars and footers.</p>



<p>With the arrival of the <strong>Block Editor (Gutenberg)</strong>, widgets have been reimagined as blocks. This means we can now manage widgets using the same block-based system we use for posts and pages—bringing consistency and visual clarity to the editing experience.</p>



<h2 class="wp-block-heading">Block-Based Widgets: Why It Matters</h2>



<p>So why the block-based widget editor matters:</p>



<ul class="wp-block-list">
<li><strong>Visual Editing:</strong> We can now see what our widgets will look like as we edit them.</li>



<li><strong>Block Flexibility:</strong> Any block—whether native or third-party—can be used as a widget.</li>



<li><strong>Reusable Blocks:</strong> We can reuse widget content across the site.</li>



<li><strong>Improved Customization:</strong> With group, column, and spacing blocks, layout possibilities have exploded.</li>
</ul>



<h2 class="wp-block-heading">Enabling Block Widgets in Classic Themes (Code Example)</h2>



<p>If our theme doesn&#8217;t support block widgets yet, we can enable it using a simple snippet in our theme’s <code>functions.php</code> file:</p>



<pre class="wp-block-syntaxhighlighter-code">function enable_block_widgets_support() {
    add_theme_support('widgets-block-editor');
}
add_action('after_setup_theme', 'enable_block_widgets_support');</pre>



<h2 class="wp-block-heading">Creating a Custom Widget Block (Advanced)</h2>



<p>Want to build our own custom block to use as a widget? Here’s a basic boilerplate using JavaScript and the <code>@wordpress</code> packages:</p>



<pre class="wp-block-syntaxhighlighter-code">// custom-widget-block.js
const { registerBlockType } = wp.blocks;
const { TextControl } = wp.components;

registerBlockType('mytheme/custom-widget', {
    title: 'Custom Widget',
    icon: 'admin-generic',
    category: 'widgets',
    attributes: {
        content: {
            type: 'string',
            default: '',
        },
    },
    edit: (props) =&gt; {
        const { attributes: { content }, setAttributes } = props;
        return (
            &lt;TextControl
                label="Widget Content"
                value={content}
                onChange={(value) =&gt; setAttributes({ content: value })}
            /&gt;
        );
    },
    save: (props) =&gt; {
        return &lt;div&gt;{props.attributes.content}&lt;/div&gt;;
    },
});</pre>



<p>To register this block, we&#8217;d include it in our plugin or theme with proper setup via <code>block.json</code> and <code>webpack</code>/<code>wp-scripts</code>.</p>



<h2 class="wp-block-heading">Conclusion</h2>



<p>The Block Editor has turned widgets into something far more powerful and intuitive than the old drag-and-drop days. Whether we&#8217;re customizing a sidebar, footer, or creating custom blocks, the new widget system lets us manage our content visually, flexibly, and efficiently.</p>



<p></p>
<p>The post <a href="https://darkmatter-999.github.io/wordpress-block-editor-widgets/">WordPress Block Editor: Widgets</a> appeared first on <a href="https://darkmatter-999.github.io/">Lakshyajeet&#039;s Blog</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://darkmatter-999.github.io/wordpress-block-editor-widgets/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>WordPress Block Editor: Formatting Toolbar API</title>
		<link>https://darkmatter-999.github.io/wordpress-block-editor-formatting-toolbar-api/</link>
					<comments>https://darkmatter-999.github.io/wordpress-block-editor-formatting-toolbar-api/#respond</comments>
		
		<dc:creator><![CDATA[lakshyajeet]]></dc:creator>
		<pubDate>Thu, 08 May 2025 14:34:35 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<category><![CDATA[blog]]></category>
		<category><![CDATA[blogging]]></category>
		<category><![CDATA[technology]]></category>
		<category><![CDATA[wordpress]]></category>
		<category><![CDATA[writing]]></category>
		<guid isPermaLink="false">https://lakshyajeet999.wordpress.com/?p=879</guid>

					<description><![CDATA[<p>As developers working with WordPress, we’ve seen the shift from the classic editor to the modern Block Editor. One powerful features we get to work with is it the Formatting Toolbar API, which allows us to add custom controls to the inline formatting toolbar of rich text fields in our blocks. What Is the Formatting [&#8230;]</p>
<p>The post <a href="https://darkmatter-999.github.io/wordpress-block-editor-formatting-toolbar-api/">WordPress Block Editor: Formatting Toolbar API</a> appeared first on <a href="https://darkmatter-999.github.io/">Lakshyajeet&#039;s Blog</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<p>As developers working with WordPress, we’ve seen the shift from the classic editor to the modern Block Editor. One powerful features we get to work with is it the <strong>Formatting Toolbar API</strong>, which allows us to add custom controls to the inline formatting toolbar of rich text fields in our blocks.</p>



<h2 class="wp-block-heading">What Is the Formatting Toolbar API?</h2>



<p>The <strong>Formatting Toolbar API</strong> lets us add custom inline buttons (like bold, italic, links, etc) to the toolbar that appears when we highlight text inside a rich text block. This API is part of the <code>@wordpress/rich-text</code> and <code>@wordpress/format-library</code> packages.</p>



<p>With this, we can introduce custom formats like highlighting text or adding special tooltips to create a more tailored content editing experience for our users.</p>



<h2 class="wp-block-heading">Example: Adding a “Highlight” Button to the Toolbar</h2>



<h3 class="wp-block-heading">1. Register the Format Type</h3>



<p>We&#8217;ll use <code>registerFormatType</code> from <code>@wordpress/rich-text</code>.</p>



<pre class="wp-block-syntaxhighlighter-code">// my-custom-highlight.js
import { registerFormatType, toggleFormat } from '@wordpress/rich-text';
import { RichTextToolbarButton } from '@wordpress/block-editor';
import { Fragment } from '@wordpress/element';
import { __ } from '@wordpress/i18n';
import { formatBold } from '@wordpress/icons';

registerFormatType('my-plugin/highlight', {
    title: __('Highlight', 'my-plugin'),
    tagName: 'mark',
    className: 'highlighted-text',
    edit({ isActive, value, onChange }) {
        return (
            &lt;Fragment&gt;
                &lt;RichTextToolbarButton
                    icon={formatBold}
                    title={__('Highlight', 'my-plugin')}
                    onClick={() =&gt; {
                        onChange(toggleFormat(value, {
                            type: 'my-plugin/highlight',
                        }));
                    }}
                    isActive={isActive}
                /&gt;
            &lt;/Fragment&gt;
        );
    },
});</pre>



<h3 class="wp-block-heading">2. Enqueue the Script</h3>



<p>In our plugin or theme <code>functions.php</code>, enqueue the script using <code>enqueue_block_editor_assets</code>.</p>



<pre class="wp-block-syntaxhighlighter-code">function my_plugin_enqueue_formatting_toolbar() {
    wp_enqueue_script(
        'my-custom-highlight',
        plugin_dir_url(__FILE__) . 'my-custom-highlight.js',
        [ 'wp-rich-text', 'wp-element', 'wp-block-editor', 'wp-i18n' ],
        false,
        true
    );
}
add_action('enqueue_block_editor_assets', 'my_plugin_enqueue_formatting_toolbar');</pre>



<h3 class="wp-block-heading">3. Add Some Styling</h3>



<p>Add a custom style so the highlighting is visible.</p>



<pre class="wp-block-syntaxhighlighter-code">.mark.highlighted-text {
    background-color: yellow;
    padding: 0 2px;
}</pre>



<h2 class="wp-block-heading">Conclusion</h2>



<p>The <strong>Formatting Toolbar API</strong> gives us a flexible way to extend the WordPress editing experience. Whether we&#8217;re adding highlights, tooltips, or custom shortcodes, this API is a powerful tool in our WordPress development toolkit.</p>
<p>The post <a href="https://darkmatter-999.github.io/wordpress-block-editor-formatting-toolbar-api/">WordPress Block Editor: Formatting Toolbar API</a> appeared first on <a href="https://darkmatter-999.github.io/">Lakshyajeet&#039;s Blog</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://darkmatter-999.github.io/wordpress-block-editor-formatting-toolbar-api/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>WordPress Block Editor: Custom Metaboxes and Notices</title>
		<link>https://darkmatter-999.github.io/wordpress-block-editor-custom-metaboxes-and-notices/</link>
					<comments>https://darkmatter-999.github.io/wordpress-block-editor-custom-metaboxes-and-notices/#respond</comments>
		
		<dc:creator><![CDATA[lakshyajeet]]></dc:creator>
		<pubDate>Wed, 07 May 2025 14:42:41 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<category><![CDATA[blogging]]></category>
		<category><![CDATA[digital-marketing]]></category>
		<category><![CDATA[javascript]]></category>
		<category><![CDATA[technology]]></category>
		<category><![CDATA[wordpress]]></category>
		<guid isPermaLink="false">https://lakshyajeet999.wordpress.com/?p=871</guid>

					<description><![CDATA[<p>As WordPress developers, one of the most powerful capabilities we have is extending the editor experience for content creators. In this post, we’re diving into how we can use the Block Editor to add metaboxes and notices—without relying on legacy PHP code. Why Metaboxes and Notices Matter Metaboxes allow us to collect custom meta information [&#8230;]</p>
<p>The post <a href="https://darkmatter-999.github.io/wordpress-block-editor-custom-metaboxes-and-notices/">WordPress Block Editor: Custom Metaboxes and Notices</a> appeared first on <a href="https://darkmatter-999.github.io/">Lakshyajeet&#039;s Blog</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<p>As WordPress developers, one of the most powerful capabilities we have is extending the editor experience for content creators. In this post, we’re diving into how we can use the Block Editor to add metaboxes and notices—without relying on legacy PHP code.</p>



<h2 class="wp-block-heading">Why Metaboxes and Notices Matter</h2>



<p>Metaboxes allow us to collect custom meta information related to a post—think SEO descriptions, additional fields, or custom toggles. Meanwhile, notices give us the ability to alert users to something important—like a successful save, an error, or a prompt for further action.</p>



<p>By integrating these features directly into the Gutenberg (Block) Editor, we maintain a native, modern, and seamless user experience.</p>



<h2 class="wp-block-heading">Metaboxes</h2>



<pre class="wp-block-syntaxhighlighter-code">import { registerBlockType } from '@wordpress/blocks';
import { TextControl } from '@wordpress/components';
import { useSelect } from '@wordpress/data';
import { useEntityProp } from '@wordpress/core-data';
import { useBlockProps } from '@wordpress/block-editor';

const Edit = () =&gt; {
	const blockProps = useBlockProps();
	const postType = useSelect(
		(select) =&gt; select('core/editor').getCurrentPostType(),
		[]
	);

	const [meta, setMeta] = useEntityProp('postType', postType, 'meta');
	const metaFieldValue = meta.myguten_meta_block_field;

	const updateMetaValue = (newValue) =&gt; {
		setMeta({ ...meta, myguten_meta_block_field: newValue });
	};

	return (
		&lt;div {...blockProps}&gt;
			&lt;TextControl
				label="Meta Block Field"
				value={metaFieldValue}
				onChange={updateMetaValue}
			/&gt;
		&lt;/div&gt;
	);
};

registerBlockType('myguten/meta-block', {
	edit: Edit,
	save: () =&gt; null, // We save this data as post meta, not block content.
});</pre>



<ul class="wp-block-list">
<li>We use <code>useEntityProp</code> to access and modify the post meta.</li>



<li><code>TextControl</code> lets us render a simple input field.</li>



<li>The block doesn&#8217;t save any content itself; instead, we save custom metadata using the <code>setMeta</code> function.</li>
</ul>



<h3 class="wp-block-heading">Registering Metakeys</h3>



<p>Before this works, we need to make sure to <strong>register the meta key</strong> in PHP and set <code>'show_in_rest' =&gt; true</code> so it&#8217;s accessible from the block editor.</p>



<pre class="wp-block-syntaxhighlighter-code">function myguten_register_post_meta() {
	register_post_meta( 'post', 'myguten_meta_block_field', array(
		'show_in_rest' =&gt; true,
		'type'         =&gt; 'string',
		'single'       =&gt; true,
		'auth_callback' =&gt; function() {
			return current_user_can( 'edit_posts' );
		}
	) );
}
add_action( 'init', 'myguten_register_post_meta' );</pre>



<h2 class="wp-block-heading">Admin Notices</h2>



<p>There are times when we want to alert the user—maybe something failed, or we want to show a confirmation. The Gutenberg editor provides a great way to <strong>hook into the notices system</strong>.</p>



<pre class="wp-block-syntaxhighlighter-code">import { useSelect } from '@wordpress/data';
import { store as noticesStore } from '@wordpress/notices';

const ExampleComponent = () =&gt; {
	const notices = useSelect((select) =&gt;
		select(noticesStore).getNotices()
	);
	return (
		&lt;ul&gt;
			{notices.map((notice) =&gt; (
				&lt;li key={notice.id}&gt;{notice.content}&lt;/li&gt;
			))}
		&lt;/ul&gt;
	);
};</pre>



<p>By using <code>useSelect</code> and <code>noticesStore</code>, we can tap into WordPress’s internal notices system. This keeps our UI consistent with the rest of the editor and gives us a standardized way to deliver feedback to the user.</p>



<pre class="wp-block-syntaxhighlighter-code">import { useDispatch } from '@wordpress/data';
import { store as noticesStore } from '@wordpress/notices';

const { createSuccessNotice, createErrorNotice } = useDispatch(noticesStore);

createSuccessNotice('Your meta field was updated successfully!');</pre>



<h2 class="wp-block-heading">Conclusion</h2>



<p>Integrating metaboxes and notices into the Block Editor lets us deliver a far better editorial experience. It’s cleaner, more responsive, and 100% native to Gutenberg. As we continue building modern WordPress solutions, embracing the Block Editor&#8217;s capabilities ensures our tools are future-proof and aligned with WordPress core.</p>
<p>The post <a href="https://darkmatter-999.github.io/wordpress-block-editor-custom-metaboxes-and-notices/">WordPress Block Editor: Custom Metaboxes and Notices</a> appeared first on <a href="https://darkmatter-999.github.io/">Lakshyajeet&#039;s Blog</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://darkmatter-999.github.io/wordpress-block-editor-custom-metaboxes-and-notices/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>WordPress Block Editor: Block Supports Explained</title>
		<link>https://darkmatter-999.github.io/wordpress-block-editor-block-supports-explained/</link>
					<comments>https://darkmatter-999.github.io/wordpress-block-editor-block-supports-explained/#respond</comments>
		
		<dc:creator><![CDATA[lakshyajeet]]></dc:creator>
		<pubDate>Wed, 30 Apr 2025 14:31:37 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<category><![CDATA[blogging]]></category>
		<category><![CDATA[blogging-tips]]></category>
		<category><![CDATA[non-classe]]></category>
		<category><![CDATA[technology]]></category>
		<category><![CDATA[wordpress]]></category>
		<guid isPermaLink="false">https://lakshyajeet999.wordpress.com/?p=845</guid>

					<description><![CDATA[<p>As WordPress developers and site creators, we love the flexibility the Block Editor (Gutenberg) offers us. Whether we’re building custom blocks or fine-tuning user experiences, understanding how Block Supports work is essential. In this blog, we&#8217;ll explore what Block Supports are, how to use them, and how can someone implement it in our own custom [&#8230;]</p>
<p>The post <a href="https://darkmatter-999.github.io/wordpress-block-editor-block-supports-explained/">WordPress Block Editor: Block Supports Explained</a> appeared first on <a href="https://darkmatter-999.github.io/">Lakshyajeet&#039;s Blog</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<p>As WordPress developers and site creators, we love the flexibility the Block Editor (Gutenberg) offers us. Whether we’re building custom blocks or fine-tuning user experiences, understanding how <strong>Block Supports</strong> work is essential.</p>



<p>In this blog, we&#8217;ll explore what <strong>Block Supports</strong> are, how to use them, and how can someone implement it in our own custom blocks.</p>



<h3 class="wp-block-heading">What Are Block Supports?</h3>



<p>Block Supports are built-in features provided by the WordPress Block Editor that we can <strong>opt into</strong> when developing our custom blocks. These supports allow us to <strong>enable additional UI controls</strong> — like typography, color, spacing, borders, and more — directly in the editor sidebar for our blocks.</p>



<p>This means we don’t have to manually code UI panels or handle CSS ourselves for many of these features — WordPress does that for us when we enable supports.</p>



<h3 class="wp-block-heading">Why Use Block Supports?</h3>



<ul class="wp-block-list">
<li>We save development time.</li>



<li>We make our blocks consistent with core WordPress blocks.</li>



<li>We give users a better editing experience with built-in controls.</li>
</ul>



<h3 class="wp-block-heading">How to Use Block Supports in a Custom Block</h3>



<p>Let’s walk through how to add block supports to a custom block. This involves registering our block using <code>registerBlockType</code> and adding the <code>supports</code> key.</p>



<pre class="wp-block-syntaxhighlighter-code">// my-custom-block.js
import { registerBlockType } from '@wordpress/blocks';
import { __ } from '@wordpress/i18n';
import { useBlockProps } from '@wordpress/block-editor';

registerBlockType('myplugin/my-custom-block', {
    title: __('My Custom Block', 'myplugin'),
    icon: 'smiley',
    category: 'design',
    supports: {
        color: {
            text: true,
            background: true,
        },
        spacing: {
            margin: true,
            padding: true,
        },
        typography: {
            fontSize: true,
            lineHeight: true,
        },
        border: true,
        align: ['wide', 'full'],
    },
    edit({ attributes }) {
        const blockProps = useBlockProps();

        return (
            &lt;div {...blockProps}&gt;
                &lt;p&gt;This is our custom block with block supports.&lt;/p&gt;
            &lt;/div&gt;
        );
    },
    save({ attributes }) {
        const blockProps = useBlockProps.save();
        return (
            &lt;div {...blockProps}&gt;
                &lt;p&gt;This is our custom block with block supports.&lt;/p&gt;
            &lt;/div&gt;
        );
    }
});</pre>



<h3 class="wp-block-heading">Common Block Supports We Can Use</h3>



<p>Here’s a quick overview of common supports:</p>



<figure class="wp-block-table"><table class="has-fixed-layout"><thead><tr><th>Support</th><th>Description</th></tr></thead><tbody><tr><td><code>color</code></td><td>Enables text/background color controls</td></tr><tr><td><code>typography</code></td><td>Adds font size and line-height controls</td></tr><tr><td><code>spacing</code></td><td>Adds padding and margin settings</td></tr><tr><td><code>border</code></td><td>Allows setting border radius, width, etc</td></tr><tr><td><code>align</code></td><td>Enables block alignment (wide/full)</td></tr><tr><td><code>html</code></td><td>Allows editing the block’s HTML</td></tr></tbody></table></figure>



<p><strong>CSS Variables</strong>: When using block supports, the editor outputs inline styles or CSS variables. Always check the frontend for consistent rendering.</p>



<p><strong>Opt-Out</strong>: If we want to disable certain supports for a core block (e.g., removing color options from the Paragraph block), we can use block filters like <code>blocks.registerBlockType</code>.</p>



<pre class="wp-block-syntaxhighlighter-code">// Disable color support for Paragraph block
wp.hooks.addFilter(
    'blocks.registerBlockType',
    'myplugin/remove-paragraph-supports',
    (settings, name) =&gt; {
        if (name === 'core/paragraph') {
            settings.supports = {
                ...settings.supports,
                color: false,
            };
        }
        return settings;
    }
);</pre>



<h2 class="wp-block-heading">Conclusion</h2>



<p>Block supports are a powerful and underused part of the WordPress block development toolkit. By enabling them, we create more flexible, future-proof, and user-friendly blocks — without reinventing the wheel.</p>



<p></p>
<p>The post <a href="https://darkmatter-999.github.io/wordpress-block-editor-block-supports-explained/">WordPress Block Editor: Block Supports Explained</a> appeared first on <a href="https://darkmatter-999.github.io/">Lakshyajeet&#039;s Blog</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://darkmatter-999.github.io/wordpress-block-editor-block-supports-explained/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>WordPress Block Editor: Block Filters Explained</title>
		<link>https://darkmatter-999.github.io/wordpress-block-editor-block-filters-explained/</link>
					<comments>https://darkmatter-999.github.io/wordpress-block-editor-block-filters-explained/#respond</comments>
		
		<dc:creator><![CDATA[lakshyajeet]]></dc:creator>
		<pubDate>Tue, 29 Apr 2025 14:09:43 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<category><![CDATA[blogging]]></category>
		<category><![CDATA[javascript]]></category>
		<category><![CDATA[react]]></category>
		<category><![CDATA[web-development]]></category>
		<category><![CDATA[wordpress]]></category>
		<guid isPermaLink="false">https://lakshyajeet999.wordpress.com/?p=839</guid>

					<description><![CDATA[<p>As WordPress developers, we&#8217;ve come to appreciate the power and flexibility of the Block Editor (a.k.a. Gutenberg). While creating custom blocks is often the go-to approach, sometimes we just want to modify existing blocks — tweak how they behave, change their appearance, or even alter how they save data. That’s where block filters come in. [&#8230;]</p>
<p>The post <a href="https://darkmatter-999.github.io/wordpress-block-editor-block-filters-explained/">WordPress Block Editor: Block Filters Explained</a> appeared first on <a href="https://darkmatter-999.github.io/">Lakshyajeet&#039;s Blog</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<p>As WordPress developers, we&#8217;ve come to appreciate the power and flexibility of the Block Editor (a.k.a. Gutenberg). While creating custom blocks is often the go-to approach, sometimes we just want to modify <strong>existing blocks</strong> — tweak how they behave, change their appearance, or even alter how they save data.</p>



<p>That’s where <strong>block filters</strong> come in.</p>



<p>In this blog, we’ll explore what block filters are, how we can use them to extend core or third-party blocks, and walk through real-world examples using code.</p>



<h2 class="wp-block-heading">What Are Block Filters in WordPress?</h2>



<p>Block filters are part of the <strong>WordPress hook system</strong> applied to Gutenberg blocks. They allow us to hook into various parts of a block’s lifecycle:</p>



<ul class="wp-block-list">
<li>When it&#8217;s registered</li>



<li>When it&#8217;s rendered in the editor</li>



<li>When it saves data</li>



<li>And more</li>
</ul>



<p>This gives us fine-grained control without having to create a block from scratch.</p>



<h2 class="wp-block-heading">Why Use Block Filters?</h2>



<p>Here are a few scenarios where block filters are incredibly useful:</p>



<ul class="wp-block-list">
<li>Adding custom class names to core blocks (like <code>core/paragraph</code>)</li>



<li>Injecting custom attributes (eg-, adding alignment or tracking options)</li>



<li>Replacing or wrapping a block’s default edit or save component</li>



<li>Changing default settings or restricting block features</li>
</ul>



<h2 class="wp-block-heading">Common Block Filters</h2>



<p>Here are some of the most used filters:</p>



<figure class="wp-block-table"><table class="has-fixed-layout"><thead><tr><th>Filter</th><th>Description</th></tr></thead><tbody><tr><td><code>blocks.registerBlockType</code></td><td>Modify block settings when it&#8217;s registered</td></tr><tr><td><code>editor.BlockEdit</code></td><td>Override or wrap the block&#8217;s edit component</td></tr><tr><td><code>blocks.getSaveContent.extraProps</code></td><td>Inject extra props (eg-, class) into saved markup</td></tr><tr><td><code>blocks.getBlockDefaultClassName</code></td><td>Override default class names</td></tr><tr><td><code>blocks.getSaveElement</code></td><td>Modify the output of the block&#8217;s save function<br></td></tr></tbody></table></figure>



<h3 class="wp-block-heading">1. Add a Custom Class to All Paragraph Blocks</h3>



<p>Let’s say we want every <code>core/paragraph</code> block to get a custom class like <code>my-custom-paragraph</code>.</p>



<pre class="wp-block-syntaxhighlighter-code">const { addFilter } = wp.hooks;

function addCustomClassName( props, blockType, attributes ) {
    if ( blockType.name === 'core/paragraph' ) {
        return {
            ...props,
            className: `${props.className || ''} my-custom-paragraph`,
        };
    }
    return props;
}

addFilter(
    'blocks.getSaveContent.extraProps',
    'my-plugin/add-custom-class',
    addCustomClassName
);</pre>



<h3 class="wp-block-heading">2. Modify Block Settings on Registration</h3>



<p>What if we want to disable the &#8220;drop cap&#8221; feature from the paragraph block?</p>



<pre class="wp-block-syntaxhighlighter-code">const { addFilter } = wp.hooks;

function modifyBlockSettings( settings, name ) {
    if ( name === 'core/paragraph' ) {
        return {
            ...settings,
            supports: {
                ...settings.supports,
                dropCap: false,
            },
        };
    }
    return settings;
}

addFilter(
    'blocks.registerBlockType',
    'my-plugin/modify-paragraph-settings',
    modifyBlockSettings
);</pre>



<h3 class="wp-block-heading">3. Wrap the Block&#8217;s Edit Component</h3>



<p>Need to inject UI or logic into a block&#8217;s editor UI? We can wrap the <code>edit</code> function using <code>editor.BlockEdit</code>.</p>



<pre class="wp-block-syntaxhighlighter-code">const { addFilter } = wp.hooks;
const { createHigherOrderComponent } = wp.compose;
const { Fragment } = wp.element;

const withCustomEditWrapper = createHigherOrderComponent( ( BlockEdit ) =&gt; {
    return ( props ) =&gt; {
        if ( props.name === 'core/paragraph' ) {
            return (
                &lt;Fragment&gt;
                    &lt;div style={{ border: '1px solid red', padding: '10px' }}&gt;
                        &lt;strong&gt;Custom UI:&lt;/strong&gt; You’re editing a paragraph!
                    &lt;/div&gt;
                    &lt;BlockEdit { ...props } /&gt;
                &lt;/Fragment&gt;
            );
        }
        return &lt;BlockEdit { ...props } /&gt;;
    };
}, 'withCustomEditWrapper' );

addFilter(
    'editor.BlockEdit',
    'my-plugin/custom-block-edit',
    withCustomEditWrapper
);</pre>



<h2 class="wp-block-heading">Enqueuing the JavaScript</h2>



<p>To make all this work, we’ll need to enqueue our JS file in the editor.</p>



<pre class="wp-block-syntaxhighlighter-code">function my_plugin_enqueue_editor_assets() {
    wp_enqueue_script(
        'my-plugin-block-filters',
        plugin_dir_url( __FILE__ ) . 'my-plugin.js',
        array( 'wp-blocks', 'wp-hooks', 'wp-element', 'wp-compose', 'wp-editor' ),
        '1.0.0',
        true
    );
}
add_action( 'enqueue_block_editor_assets', 'my_plugin_enqueue_editor_assets' );</pre>



<h2 class="wp-block-heading">Final Thoughts</h2>



<p>Block filters are a powerful tool in our WordPress development toolkit. They let us modify existing blocks in a clean, extensible way — without forking or rewriting them. Whether we&#8217;re improving the editorial experience or enforcing consistent branding, filters help us tailor Gutenberg to our needs.</p>



<p></p>
<p>The post <a href="https://darkmatter-999.github.io/wordpress-block-editor-block-filters-explained/">WordPress Block Editor: Block Filters Explained</a> appeared first on <a href="https://darkmatter-999.github.io/">Lakshyajeet&#039;s Blog</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://darkmatter-999.github.io/wordpress-block-editor-block-filters-explained/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>WordPress Block Editor: Creating a Custom Block</title>
		<link>https://darkmatter-999.github.io/wordpress-block-editor-creating-a-custom-block/</link>
					<comments>https://darkmatter-999.github.io/wordpress-block-editor-creating-a-custom-block/#respond</comments>
		
		<dc:creator><![CDATA[lakshyajeet]]></dc:creator>
		<pubDate>Mon, 28 Apr 2025 14:12:08 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<category><![CDATA[blogging]]></category>
		<category><![CDATA[digital-marketing]]></category>
		<category><![CDATA[programming]]></category>
		<category><![CDATA[web-development]]></category>
		<category><![CDATA[wordpress]]></category>
		<guid isPermaLink="false">https://lakshyajeet999.wordpress.com/?p=828</guid>

					<description><![CDATA[<p>In the evolving world of web development, the WordPress Block Editor (Gutenberg) has revolutionized how we design and manage content. In this blog post, we&#8217;ll walk through the entire process—from setup to seeing our custom block in action. Why Create Custom Blocks? While WordPress provides plenty of built-in blocks, we often find ourselves needing tailor-made [&#8230;]</p>
<p>The post <a href="https://darkmatter-999.github.io/wordpress-block-editor-creating-a-custom-block/">WordPress Block Editor: Creating a Custom Block</a> appeared first on <a href="https://darkmatter-999.github.io/">Lakshyajeet&#039;s Blog</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<p>In the evolving world of web development, the <strong>WordPress Block Editor (Gutenberg)</strong> has revolutionized how we design and manage content. In this blog post, we&#8217;ll walk through the entire process—from setup to seeing our custom block in action.</p>



<h2 class="wp-block-heading">Why Create Custom Blocks?</h2>



<p>While WordPress provides plenty of built-in blocks, we often find ourselves needing tailor-made solutions for unique layouts, content types, or interactive components. That’s where custom blocks shine. With <code>@wordpress/scripts</code>, we get a modern development environment with Webpack, Babel, and other tools already configured.</p>



<h2 class="wp-block-heading">What Is <code>@wordpress/scripts</code>?</h2>



<p><code>@wordpress/scripts</code> is a package maintained by the WordPress core team. It abstracts away the configuration complexity, letting us focus on writing our block logic using modern JavaScript (React + JSX) and CSS.</p>



<h2 class="wp-block-heading">Creating a custom block</h2>



<h3 class="wp-block-heading">Step 1: Set Up the Plugin Folder</h3>



<p>We start by creating a plugin directory in <code>wp-content/plugins/</code></p>



<pre class="wp-block-syntaxhighlighter-code">mkdir my-basic-block
cd my-basic-block</pre>



<p>Now, we create the main plugin file: <strong><code>my-basic-block.php</code></strong></p>



<pre class="wp-block-syntaxhighlighter-code">&lt;?php
/**
 * Plugin Name: My Basic Block
 * Description: A simple custom Gutenberg block.
 * Version: 1.0.0
 * Author: DarkMatter-999
 */

defined( 'ABSPATH' ) || exit;

function my_basic_block_register_block() {
    register_block_type( __DIR__ . '/build/my-basic-block' );
}
add_action( 'init', 'my_basic_block_register_block' );</pre>



<h3 class="wp-block-heading">Step 2: Initialize Node.js and Install Dependencies</h3>



<p>Initialize a Node.js project</p>



<pre class="wp-block-syntaxhighlighter-code">npm init -y
npm install @wordpress/scripts --save-dev</pre>



<p>Update <code>package.json</code> with build scripts</p>



<pre class="wp-block-syntaxhighlighter-code">{
  "name": "my-basic-block",
  "version": "1.0.0",
  "scripts": {
    "start": "wp-scripts start",
    "build": "wp-scripts build"
  },
  "devDependencies": {
    "@wordpress/scripts": "^28.0.0"
  }
}</pre>



<h3 class="wp-block-heading">Step 3: Create Block Source Files</h3>



<h4 class="wp-block-heading"><code>block.json</code> — Block Metadata</h4>



<p>Create the block metadata file: <strong><code>src/my-basic-block/block.json</code></strong></p>



<pre class="wp-block-syntaxhighlighter-code">{
  "$schema": "https://schemas.wp.org/trunk/block.json",
  "apiVersion": 3,
  "name": "learning/my-basic-block",
  "version": "0.1.0",
  "title": "My Basic Block",
  "category": "text",
  "icon": "universal-access-alt",
  "description": "A basic Gutenberg block built manually.",
  "textdomain": "my-basic-block",
  "editorScript": "file:./index.js"
}</pre>



<h4 class="wp-block-heading"><code>index.js</code> — Block Code</h4>



<p>Now register the block using the metadata we defined: <strong><code>src/my-basic-block/index.js</code></strong></p>



<pre class="wp-block-syntaxhighlighter-code">import { registerBlockType } from '@wordpress/blocks';
import metadata from './block.json';

registerBlockType(metadata.name, {
	edit: () =&gt; {
		return &lt;p&gt;Hello World! This is my basic block. (Editor)&lt;/p&gt;;
	},
	save: () =&gt; {
		return &lt;p&gt;Hello World! This is my basic block. (Frontend)&lt;/p&gt;;
	},
});</pre>



<h4 class="wp-block-heading">Step 4: Build the Block</h4>



<pre class="wp-block-syntaxhighlighter-code">npm run build</pre>



<p>After this, a <code>build/</code> directory will be created, and the compiled version of our block will be ready for WordPress.</p>



<h3 class="wp-block-heading">Step 5: Activate and Use the Block</h3>



<ol class="wp-block-list">
<li>Go to <strong>Plugins → Installed Plugins</strong> in our WordPress dashboard.</li>



<li>Activate <strong>My Basic Block</strong>.</li>



<li>Create or edit a post.</li>



<li>Search for “<strong>My Basic Block</strong>” and insert it into the page.</li>



<li>We’ll see the static message in both editor and frontend.</li>
</ol>



<h2 class="wp-block-heading">Bonus: Why Not Use <code>create-block</code>?</h2>



<pre class="wp-block-syntaxhighlighter-code">npx @wordpress/create-block@latest my-basic-block</pre>



<p>Well, that command is great for quickly scaffolding a full-featured plugin with everything preconfigured. But doing it manually — like we did — helps us understand how block metadata, build scripts, PHP registration, and block JavaScript all connect together. It’s a great learning experience.</p>



<h2 class="wp-block-heading">Wrapping Up</h2>



<p>We just created our <strong>first custom Gutenberg block</strong> from scratch, using modern tools like <code>@wordpress/scripts</code>. This is the foundation for building dynamic, reusable, and powerful blocks in WordPress. Going forward, we can add interactivity, styling, and advanced features like block controls, Inspector panels, and even dynamic server-side rendering.</p>



<p></p>
<p>The post <a href="https://darkmatter-999.github.io/wordpress-block-editor-creating-a-custom-block/">WordPress Block Editor: Creating a Custom Block</a> appeared first on <a href="https://darkmatter-999.github.io/">Lakshyajeet&#039;s Blog</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://darkmatter-999.github.io/wordpress-block-editor-creating-a-custom-block/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Advanced Theme Development in WordPress: WP_Widget</title>
		<link>https://darkmatter-999.github.io/advanced-theme-development-in-wordpress-wp_widget/</link>
					<comments>https://darkmatter-999.github.io/advanced-theme-development-in-wordpress-wp_widget/#respond</comments>
		
		<dc:creator><![CDATA[lakshyajeet]]></dc:creator>
		<pubDate>Wed, 16 Apr 2025 15:52:42 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<category><![CDATA[blogging]]></category>
		<category><![CDATA[software]]></category>
		<category><![CDATA[web-development]]></category>
		<category><![CDATA[wordpress]]></category>
		<category><![CDATA[writing]]></category>
		<guid isPermaLink="false">https://lakshyajeet999.wordpress.com/?p=784</guid>

					<description><![CDATA[<p>When we’re building advanced WordPress themes, we often focus on custom post types, taxonomies, and template hierarchies. But there’s one powerful tool that’s often overlooked: the WP_Widget class. Mastering widgets can unlock new possibilities for dynamic, user-configurable areas within our themes. Today, let’s dive deep into WP_Widget and how we can use it to create [&#8230;]</p>
<p>The post <a href="https://darkmatter-999.github.io/advanced-theme-development-in-wordpress-wp_widget/">Advanced Theme Development in WordPress: WP_Widget</a> appeared first on <a href="https://darkmatter-999.github.io/">Lakshyajeet&#039;s Blog</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<p>When we’re building advanced WordPress themes, we often focus on custom post types, taxonomies, and template hierarchies. But there’s one powerful tool that’s often overlooked: the <code>WP_Widget</code> class. Mastering widgets can unlock new possibilities for dynamic, user-configurable areas within our themes. Today, let’s dive deep into <code>WP_Widget</code> and how we can use it to create fully customized, reusable widgets in our WordPress themes.</p>



<h2 class="wp-block-heading">What Is a <code>WP_Widget</code>?</h2>



<p>In WordPress, a widget is a small block that performs a specific function. We’ve all used widgets like &#8220;Recent Posts&#8221;, &#8220;Categories&#8221;, or &#8220;Search&#8221; by dragging them into widgetized areas (aka sidebars). Under the hood, these are powered by the <code>WP_Widget</code> class.</p>



<p>By extending this class, we can create our own custom widgets tailored to the needs of our clients or projects.</p>



<h2 class="wp-block-heading">Why Use Custom Widgets?</h2>



<p>Custom widgets are great when we want to:</p>



<ul class="wp-block-list">
<li>Provide non-technical users with easy-to-configure blocks of content.</li>



<li>Reuse dynamic features across various sections of the site.</li>



<li>Create branded or highly customized modules within sidebars or footers.</li>



<li>Add interactive or API-powered elements to our themes.</li>
</ul>



<h2 class="wp-block-heading">Understanding the Three Core Functions of a WordPress Widget</h2>



<p>When we create a custom widget by extending the <code>WP_Widget</code> class, there are <strong>three essential methods</strong> we must define to make our widget functional. Think of these as the <em>foundation</em> for every widget. They each serve a unique purpose.</p>



<h3 class="wp-block-heading">1. <code>__construct()</code> – The Widget Setup</h3>



<p>This is the <strong>constructor method</strong>. It runs when our widget is initialized and defines key information like the widget ID, name, and description. This is also where we register the widget with WordPress.</p>



<pre class="wp-block-syntaxhighlighter-code">public function __construct() {
    parent::__construct(
        'greeting_widget', // Widget ID
        __('Greeting Widget', 'text_domain'), // Widget Name
        array('description' =&gt; __('Displays a greeting message.', 'text_domain')) // Widget Description
    );
}</pre>



<h3 class="wp-block-heading">2. <code>widget()</code> – Frontend Display</h3>



<p>This method controls how the widget appears <strong>on the frontend</strong> of the site. It outputs the HTML that users see in sidebars, footers, or wherever the widget is placed.</p>



<pre class="wp-block-syntaxhighlighter-code">public function widget($args, $instance) {
    echo $args['before_widget'];

    if (!empty($instance['title'])) {
        echo $args['before_title'] . apply_filters('widget_title', $instance['title']) . $args['after_title'];
    }

    echo '&lt;p&gt;Hello, welcome to our site!&lt;/p&gt;';

    echo $args['after_widget'];
}</pre>



<h3 class="wp-block-heading">3. <code>form()</code> – Backend Form</h3>



<p>This function builds the <strong>widget admin form</strong> inside the WordPress dashboard (Appearance → Widgets). It allows site admins to customize things like the widget title or settings.</p>



<pre class="wp-block-syntaxhighlighter-code">public function form($instance) {
    $title = !empty($instance['title']) ? $instance['title'] : __('Greeting', 'text_domain');
    ?&gt;
    &lt;p&gt;
        &lt;label for="&lt;?php echo esc_attr($this-&gt;get_field_id('title')); ?&gt;"&gt;&lt;?php _e('Title:', 'text_domain'); ?&gt;&lt;/label&gt;
        &lt;input class="widefat" id="&lt;?php echo esc_attr($this-&gt;get_field_id('title')); ?&gt;"
               name="&lt;?php echo esc_attr($this-&gt;get_field_name('title')); ?&gt;" type="text"
               value="&lt;?php echo esc_attr($title); ?&gt;"&gt;
    &lt;/p&gt;
    &lt;?php
}</pre>



<h3 class="wp-block-heading">3. <code>update()</code> – Save the Data</h3>



<p>Technically a fourth method, <code>update()</code> is used to <strong>sanitize and save</strong> the widget’s form input. It&#8217;s not visible in the UI, but it’s crucial for security and data integrity.</p>



<pre class="wp-block-syntaxhighlighter-code">public function update($new_instance, $old_instance) {
    $instance = array();
    $instance['title'] = (!empty($new_instance['title'])) ? strip_tags($new_instance['title']) : '';
    return $instance;
}</pre>



<h3 class="wp-block-heading">Register the Widget</h3>



<p>Now that we’ve defined our widget class, let’s register it in our theme.</p>



<pre class="wp-block-syntaxhighlighter-code">function register_custom_widgets() {
    register_widget('Greeting_Widget');
}
add_action('widgets_init', 'register_custom_widgets');</pre>



<h2 class="wp-block-heading">Conclusion</h2>



<p>Widgets are an underrated powerhouse in our WordPress theme development toolkit. By understanding and extending <code>WP_Widget</code>, we give ourselves the flexibility to create custom content blocks that are both powerful and user-friendly.</p>
<p>The post <a href="https://darkmatter-999.github.io/advanced-theme-development-in-wordpress-wp_widget/">Advanced Theme Development in WordPress: WP_Widget</a> appeared first on <a href="https://darkmatter-999.github.io/">Lakshyajeet&#039;s Blog</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://darkmatter-999.github.io/advanced-theme-development-in-wordpress-wp_widget/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Advanced Theme Development in WordPress: Child Themes</title>
		<link>https://darkmatter-999.github.io/advanced-theme-development-in-wordpress-child-themes/</link>
					<comments>https://darkmatter-999.github.io/advanced-theme-development-in-wordpress-child-themes/#respond</comments>
		
		<dc:creator><![CDATA[lakshyajeet]]></dc:creator>
		<pubDate>Thu, 10 Apr 2025 16:25:27 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<category><![CDATA[blogging]]></category>
		<category><![CDATA[business]]></category>
		<category><![CDATA[technology]]></category>
		<category><![CDATA[website]]></category>
		<category><![CDATA[wordpress]]></category>
		<guid isPermaLink="false">https://lakshyajeet999.wordpress.com/?p=755</guid>

					<description><![CDATA[<p>As WordPress developers, we’re always looking for ways to build websites that are not only beautiful and functional but also maintainable and upgrade-friendly. One of the best practices in advanced WordPress theme development is creating and using child themes. In this post, we’ll walk through what child themes are, why they matter, and how we [&#8230;]</p>
<p>The post <a href="https://darkmatter-999.github.io/advanced-theme-development-in-wordpress-child-themes/">Advanced Theme Development in WordPress: Child Themes</a> appeared first on <a href="https://darkmatter-999.github.io/">Lakshyajeet&#039;s Blog</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<p>As WordPress developers, we’re always looking for ways to build websites that are not only beautiful and functional but also maintainable and upgrade-friendly. One of the best practices in advanced WordPress theme development is creating and using <strong>child themes</strong>.</p>



<p>In this post, we’ll walk through what child themes are, why they matter, and how we can create and use them in our projects. We&#8217;ll see just how easy (and powerful) they are.</p>



<h2 class="wp-block-heading">What Is a WordPress Child Theme?</h2>



<p>A <strong>child theme</strong> in WordPress is a theme that inherits the functionality, styling, and templates of another theme, called the <strong>parent theme</strong>.</p>



<p>Think of a child theme as a safe workspace where we can customize the look and feel of a site <strong>without touching the original parent theme’s files</strong>. This way, we can update the parent theme without losing any of our customizations.</p>



<h3 class="wp-block-heading">Why Should We Use a Child Theme?</h3>



<ul class="wp-block-list">
<li><strong>Safe Updates</strong>: Customizations in the child theme stay intact even when the parent theme is updated.</li>



<li><strong>Modular Development</strong>: We can isolate our changes, making them easier to manage and debug.</li>



<li><strong>Faster Development</strong>: Since we&#8217;re building on top of an existing theme, we don&#8217;t start from scratch.</li>



<li><strong>Experimentation</strong>: Great for testing out changes without breaking the core theme.</li>
</ul>



<h3 class="wp-block-heading">How to Create a Child Theme in WordPress</h3>



<p>Let’s go step-by-step to create a child theme. We&#8217;ll use the popular <strong>Twenty Twenty-Four</strong> theme as our parent theme for this example.</p>



<h4 class="wp-block-heading">1. Create a Child Theme Folder</h4>



<p>In the <code>/wp-content/themes/</code> directory, we create a new folder:</p>



<pre class="wp-block-code"><code>/wp-content/themes/parenttheme-child</code></pre>



<p><strong>Naming tip</strong>: use the parent theme name followed by <code>-child</code> for clarity.</p>



<h4 class="wp-block-heading">2. Create a <code>style.css</code> File</h4>



<p>Inside the child theme folder, we create a <code>style.css</code> file. This file must start with a specific header comment to let WordPress know it&#8217;s a child theme:</p>



<pre class="wp-block-syntaxhighlighter-code">/*
Theme Name:     My Theme Child
Theme URI:      https://example.com/
Description:    A child theme of Twenty Twenty-One
Author URI:     https://example.com/
Template:       twentytwentyone
Version:        1.0.0
Text Domain:    twentytwentyone-child
*/</pre>



<h4 class="wp-block-heading">3. Enqueue the Parent Theme Styles</h4>



<p>Now, let’s create a <code>functions.php</code> file in the child theme folder to load the parent theme’s styles properly.</p>



<pre class="wp-block-syntaxhighlighter-code">&lt;?php
// Enqueue parent and child theme styles
function twentytwentyone_child_enqueue_styles() {
    $parenthandle = 'twentytwentyone-style'; // This handle may vary by theme
    $theme = wp_get_theme();

    wp_enqueue_style($parenthandle,
        get_template_directory_uri() . '/style.css',
        array(),
        $theme-&gt;parent()-&gt;get('Version')
    );

    wp_enqueue_style('twentytwentyone-child-style',
        get_stylesheet_directory_uri() . '/style.css',
        array($parenthandle),
        $theme-&gt;get('Version')
    );
}
add_action('wp_enqueue_scripts', 'twentytwentyone_child_enqueue_styles');</pre>



<h4 class="wp-block-heading">4. Activate the Child Theme</h4>



<p>Head over to <strong>Appearance &gt; Themes</strong> in the WordPress admin dashboard, and activate our new <strong>child theme</strong>.</p>



<p>Now any custom styles or PHP changes we make in the child theme won’t be lost when the parent theme is updated.</p>



<h2 class="wp-block-heading">Conclusion</h2>



<p>Child themes are a powerful tool in our WordPress development arsenal. Whether we&#8217;re building client sites, personal projects, or working on a team, they allow us to keep our code clean, safe, and future-proof.</p>



<p>By understanding how child themes work and how to build them properly, we give ourselves the freedom to innovate <strong>without risk</strong>. And that’s what modern WordPress development is all about.</p>



<p></p>
<p>The post <a href="https://darkmatter-999.github.io/advanced-theme-development-in-wordpress-child-themes/">Advanced Theme Development in WordPress: Child Themes</a> appeared first on <a href="https://darkmatter-999.github.io/">Lakshyajeet&#039;s Blog</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://darkmatter-999.github.io/advanced-theme-development-in-wordpress-child-themes/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>
