<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Front Page - Lakshyajeet&#039;s Blog</title>
	<atom:link href="/tag/ai/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description></description>
	<lastBuildDate>Sun, 06 Jul 2025 15:58:58 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.8.1</generator>

<image>
	<url>/wp-content/uploads/2025/01/cropped-nyan-1-32x32.gif</url>
	<title>Front Page - Lakshyajeet&#039;s Blog</title>
	<link>/</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>WordPress Block Editor: Nested Blocks</title>
		<link>/wordpress-block-editor-nested-blocks/</link>
					<comments>/wordpress-block-editor-nested-blocks/#respond</comments>
		
		<dc:creator><![CDATA[lakshyajeet]]></dc:creator>
		<pubDate>Mon, 05 May 2025 14:33:43 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<category><![CDATA[ai]]></category>
		<category><![CDATA[gutenberg]]></category>
		<category><![CDATA[javascript]]></category>
		<category><![CDATA[technology]]></category>
		<category><![CDATA[wordpress]]></category>
		<guid isPermaLink="false">https://lakshyajeet999.wordpress.com/?p=856</guid>

					<description><![CDATA[<p>As WordPress developers, we&#8217;ve all felt the power and flexibility that the Block Editor (Gutenberg) brings to the table. One of the more advanced (and incredibly useful) features is Nested Blocks. They give us the ability to structure content hierarchically, organize components modularly, and ultimately deliver richer editing experiences to our clients and users. What [&#8230;]</p>
<p>The post <a href="/wordpress-block-editor-nested-blocks/">WordPress Block Editor: Nested Blocks</a> appeared first on <a href="/">Lakshyajeet&#039;s Blog</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<p>As WordPress developers, we&#8217;ve all felt the power and flexibility that the Block Editor (Gutenberg) brings to the table. One of the more advanced (and incredibly useful) features is <strong>Nested Blocks</strong>. They give us the ability to structure content hierarchically, organize components modularly, and ultimately deliver richer editing experiences to our clients and users.</p>



<h3 class="wp-block-heading">What Are Nested Blocks?</h3>



<p>Nested blocks allow us to insert blocks <em>inside</em> other blocks. Think of them as sub-components. For instance, a custom “Team” block might contain multiple “Team Member” blocks. Or a “Testimonial Slider” block could hold several “Testimonial” blocks.</p>



<p>In technical terms, we achieve this nesting by using WordPress&#8217;s <code>InnerBlocks</code> component inside a custom block.</p>



<h3 class="wp-block-heading">Why Use Nested Blocks?</h3>



<p>We use nested blocks when:</p>



<ul class="wp-block-list">
<li>We want reusable layout structures (e.g. columns, cards)</li>



<li>We need to give users more flexibility while keeping them within a defined layout</li>



<li>We want to group multiple blocks for styling or behavior</li>



<li>We&#8217;re building container-like blocks (e.g. accordions, tabs, sliders)</li>
</ul>



<p>Nested blocks help balance flexibility with structure.</p>



<h2 class="wp-block-heading">Creating a Block with Nested Blocks</h2>



<h3 class="wp-block-heading">1. Register the Block</h3>



<p>We can register our block in <code>block.json</code>.</p>



<pre class="wp-block-syntaxhighlighter-code">{
  "apiVersion": 3,
  "name": "my-plugin/section",
  "title": "Section",
  "category": "layout",
  "icon": "editor-insertmore",
  "description": "A custom section block that allows nested blocks inside.",
  "supports": {
    "html": false
  },
  "editorScript": "file:./index.js"
}</pre>



<h3 class="wp-block-heading">2. Block Edit Function with <code>InnerBlocks</code></h3>



<p>In our <code>index.js</code> file, we’ll use the <code>InnerBlocks</code> component to allow nesting</p>



<pre class="wp-block-syntaxhighlighter-code">import { registerBlockType } from '@wordpress/blocks';
import { InnerBlocks } from '@wordpress/block-editor';

registerBlockType('myplugin/section', {
    edit: () =&gt; {
        return (
            &lt;div className="my-section-block"&gt;
                &lt;InnerBlocks /&gt;
            &lt;/div&gt;
        );
    },
    save: () =&gt; {
        return (
            &lt;div className="my-section-block"&gt;
                &lt;InnerBlocks.Content /&gt;
            &lt;/div&gt;
        );
    },
});</pre>



<h3 class="wp-block-heading">Restricting Allowed Blocks (Optional)</h3>



<p>Sometimes we want to restrict which blocks can be inserted inside our container. Here&#8217;s how we do that using the <code>allowedBlocks</code> prop.</p>



<pre class="wp-block-syntaxhighlighter-code">&lt;InnerBlocks
    allowedBlocks={['core/paragraph', 'core/image', 'core/heading']}
/&gt;</pre>



<p>We can also add placeholders in the templates for better UX.</p>



<pre class="wp-block-syntaxhighlighter-code">&lt;InnerBlocks
    template={[
        ['core/heading', { placeholder: 'Section Heading' }],
        ['core/paragraph', { placeholder: 'Add your text here...' }]
    ]}
/&gt;</pre>



<h3 class="wp-block-heading">Gotchas and Best Practices</h3>



<ul class="wp-block-list">
<li><strong>Avoid infinite nesting</strong> &#8211; prevent blocks from nesting themselves inside themselves.</li>



<li><strong>Use <code>templateLock</code></strong> if we want to lock the layout (<code>'all'</code>, <code>'insert'</code>, <code>'false'</code>).</li>



<li><strong>Use proper CSS scoping</strong> to avoid styling conflicts across blocks.</li>
</ul>



<h3 class="wp-block-heading">Conclusion</h3>



<p>Nested blocks are one of the most powerful tools in our WordPress development toolkit. They allow us to create structured, flexible, and user-friendly experiences for content editors. Whether we’re building reusable components or complex layout systems, mastering <code>InnerBlocks</code> will elevate our block development game.</p>



<p></p>
<p>The post <a href="/wordpress-block-editor-nested-blocks/">WordPress Block Editor: Nested Blocks</a> appeared first on <a href="/">Lakshyajeet&#039;s Blog</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/wordpress-block-editor-nested-blocks/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Advanced Theme Development in WordPress: The Customizer API</title>
		<link>/advanced-theme-development-in-wordpress-the-customizer-api/</link>
					<comments>/advanced-theme-development-in-wordpress-the-customizer-api/#comments</comments>
		
		<dc:creator><![CDATA[lakshyajeet]]></dc:creator>
		<pubDate>Fri, 04 Apr 2025 14:43:07 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<category><![CDATA[ai]]></category>
		<category><![CDATA[blogging]]></category>
		<category><![CDATA[development]]></category>
		<category><![CDATA[marketing]]></category>
		<category><![CDATA[seo]]></category>
		<category><![CDATA[technology]]></category>
		<category><![CDATA[theme development]]></category>
		<category><![CDATA[wordpress]]></category>
		<category><![CDATA[wordpress theme]]></category>
		<category><![CDATA[wp]]></category>
		<guid isPermaLink="false">https://lakshyajeet999.wordpress.com/?p=730</guid>

					<description><![CDATA[<p>The Customizer API provides site owners with a simple and intuitive interface to modify their theme settings in real-time. With the ability to customize a variety of settings—from colors and logos to layout options and typography—it’s no wonder that the Customizer API is a go-to feature for most advanced theme development projects. In this blog, [&#8230;]</p>
<p>The post <a href="/advanced-theme-development-in-wordpress-the-customizer-api/">Advanced Theme Development in WordPress: The Customizer API</a> appeared first on <a href="/">Lakshyajeet&#039;s Blog</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<p>The Customizer API provides site owners with a simple and intuitive interface to modify their theme settings in real-time. With the ability to customize a variety of settings—from colors and logos to layout options and typography—it’s no wonder that the Customizer API is a go-to feature for most advanced theme development projects.</p>



<p>In this blog, we will dive deep into the Customizer API, its components, and how we can integrate it into our WordPress themes. By the end of this series, we will have a clear understanding of how to create a fully customizable theme using the Customizer API. Let’s start by covering the basics and the essential components.</p>



<h3 class="wp-block-heading">What is the WordPress Customizer API?</h3>



<p>The <strong>Customizer API</strong> is a feature built into WordPress that allows users to modify their site’s appearance and settings through an easy-to-use interface. The Customizer provides a live preview, meaning changes are immediately reflected on the site as they are made. This is incredibly useful for theme customization, as users can instantly see the impact of their changes.</p>



<p>For us, as developers, the Customizer API is a powerful tool to provide users with a flexible, intuitive way to control how their WordPress site looks, without the need for coding knowledge.</p>



<h3 class="wp-block-heading">Key Components of the Customizer API</h3>



<p>Before we jump into adding custom settings, it’s essential to understand the main components of the Customizer API:</p>



<ol class="wp-block-list">
<li><strong>Customizer Settings</strong>: These are the values that users can modify through the Customizer.</li>



<li><strong>Customizer Controls</strong>: Controls are the input fields that allow users to change the settings (for example a text field or a color picker).</li>



<li><strong>Customizer Sections</strong>: Sections group related settings together within the Customizer, making it easier for users to find and adjust the settings they need.</li>
</ol>



<p>These components work together to give users a seamless customization experience.</p>



<h3 class="wp-block-heading">Setting Up the Customizer API in WordPress</h3>



<p>To add Customizer functionality to our theme, we need to hook into WordPress using the <code>customize_register</code> action. We’ll define the settings, controls, and sections within this function. Below is a simple example to get us started.</p>



<h4 class="wp-block-heading">Step 1: Adding a New Section</h4>



<p>The first thing the code does is add a <strong>section</strong> to the WordPress Customizer.</p>



<pre class="wp-block-syntaxhighlighter-code">$wp_customize-&gt;add_section( 'my_custom_section', array(
    'title'       =&gt; __( 'Custom Settings', 'my-theme' ),
    'priority'    =&gt; 30,
) );</pre>



<ul class="wp-block-list">
<li><code>add_section()</code>: This function is used to create a new section in the Customizer.</li>



<li><code>'my_custom_section'</code>: This is the ID for the section we&#8217;re creating. We’ll use this ID later to add settings and controls to this section.</li>



<li><code>'title' =&gt; __( 'Custom Settings', 'my-theme' )</code>: This is the title of the section. When users view the Customizer, they’ll see &#8220;Custom Settings&#8221; as the name of the section.</li>



<li><code>'priority' =&gt; 30</code>: The priority parameter determines where the section appears within the Customizer. A lower number means it will appear higher in the list.</li>
</ul>



<h4 class="wp-block-heading">Step 2: Adding a Setting for the Logo</h4>



<p>Next, the code defines a <strong>setting</strong> that will store the uploaded logo.</p>



<pre class="wp-block-syntaxhighlighter-code">$wp_customize-&gt;add_setting( 'my_theme_logo', array(
    'default'     =&gt; '',
    'transport'   =&gt; 'refresh',
) );</pre>



<ul class="wp-block-list">
<li><strong>add_setting()</strong>: This function is used to add a setting to the Customizer, which holds the value that the user selects or enters.</li>



<li><code>'my_theme_logo'</code>: This is the unique identifier for the setting. Later, we’ll use this to link the setting to an image control.</li>



<li><code>'default' =&gt; ''</code>: This sets the default value of the setting. Since it’s an image upload, the default is an empty string, meaning no image is set initially.</li>



<li><code>'transport' =&gt; 'refresh'</code>: The transport option defines how changes are applied. The <code>refresh</code> value means the page will be reloaded after the setting is updated, which is typical for image uploads and other media.</li>
</ul>



<h4 class="wp-block-heading">Step 3: Adding a Control for the Logo Upload</h4>



<p>Now, we add a <strong>control</strong> to allow users to upload an image (the logo) through the Customizer interface.</p>



<pre class="wp-block-syntaxhighlighter-code">$wp_customize-&gt;add_control( new WP_Customize_Image_Control( $wp_customize, 'my_theme_logo', array(
    'label'       =&gt; __( 'Upload Logo', 'my-theme' ),
    'section'     =&gt; 'my_custom_section',
    'settings'    =&gt; 'my_theme_logo',
) ) );</pre>



<ul class="wp-block-list">
<li><strong>add_control()</strong>: This function adds a control to the Customizer for users to interact with the setting.</li>



<li><code>new WP_Customize_Image_Control()</code>: This is a built-in control class provided by WordPress specifically for image uploads. It makes it easy for users to upload and select images for the logo.</li>



<li><code>'label' =&gt; __( 'Upload Logo', 'my-theme' )</code>: This label will be displayed next to the control, instructing users to upload their logo.</li>



<li><code>'section' =&gt; 'my_custom_section'</code>: This associates the control with the section we created earlier, ensuring it shows up in the &#8220;Custom Settings&#8221; section.</li>



<li><code>'settings' =&gt; 'my_theme_logo'</code>: This links the control to the setting we created for the logo. When the user selects an image, it will be saved to the <code>my_theme_logo</code> setting.</li>
</ul>



<h4 class="wp-block-heading">Step 4: Hooking It All Together</h4>



<p>Finally, the <code>add_action()</code> function hooks our custom function into the WordPress Customizer process:</p>



<pre class="wp-block-syntaxhighlighter-code">add_action( 'customize_register', 'my_theme_customize_register' );</pre>



<h3 class="wp-block-heading">Complete Code</h3>



<pre class="wp-block-syntaxhighlighter-code">function my_theme_customize_register( $wp_customize ) {
    // Adding a new section
    $wp_customize-&gt;add_section( 'my_custom_section', array(
        'title'       =&gt; __( 'Custom Settings', 'my-theme' ),
        'priority'    =&gt; 30,
    ) );

    // Adding a setting for the logo
    $wp_customize-&gt;add_setting( 'my_theme_logo', array(
        'default'     =&gt; '',
        'transport'   =&gt; 'refresh',
    ) );

    // Adding control to upload the logo
    $wp_customize-&gt;add_control( new WP_Customize_Image_Control( $wp_customize, 'my_theme_logo', array(
        'label'       =&gt; __( 'Upload Logo', 'my-theme' ),
        'section'     =&gt; 'my_custom_section',
        'settings'    =&gt; 'my_theme_logo',
    ) ) );
}
add_action( 'customize_register', 'my_theme_customize_register' );</pre>



<h2 class="wp-block-heading">Conclusion</h2>



<p>The WordPress Customizer is an incredibly powerful tool for theme developers. With just a few lines of code, we’ve added a section for uploading a logo, but this approach can be extended for many other types of customizations—colors, fonts, text fields, and more.</p>
<p>The post <a href="/advanced-theme-development-in-wordpress-the-customizer-api/">Advanced Theme Development in WordPress: The Customizer API</a> appeared first on <a href="/">Lakshyajeet&#039;s Blog</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/advanced-theme-development-in-wordpress-the-customizer-api/feed/</wfw:commentRss>
			<slash:comments>1</slash:comments>
		
		
			</item>
	</channel>
</rss>
